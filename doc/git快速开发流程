Git开发工作流

本主题负责人：潘魏增 panweizeng@meituan.com

目标
快速开发，快速部署，快速迭代

步骤


现在假定你已经有一份Git代码仓库，代码仓库里面默认会有一个master分支。

1.从master分支建立develop分支，然后在develop分支上进行开发。

git checkout master # 切换到master分支
git checkout -b develop # 从master创建develop分支，并切换到该分支
git commit -m "fix bug 1" # 修复了bug1
git commit -m "fix bug 2" # 修复了bug2
2.在develop开发已经完毕（修复bug或者添加新特性），这时从develop创建mirror分支。

git checkout -b mirror # 从develop创建mirror分支，并切换到该分支
3.更新master到最新，把master的代码更新合并到mirror。如果有冲突，请解决冲突后提交。

git checkout master
git pull # 更新master到最新
git checkout mirror
git merge master # 合并master到mirror
4.把mirror分支的代码更新合并到master，然后推送到远程

git checkout master
git merge mirror --squash # 压缩合并mirror分支上的代码更新
git commit -a -m 'xxxx' #注意需要进行一次提交
git push # 推送到远程
特点
单主分支结构，即远程和本地都以master作为主分支，工程师在develop分支上开发
本地master作为远程master和本地develop的桥梁，主要做pull和push的操作，保证和远程master同步
develop开发完成后，从develop创建mirror用于合并master上最新的改动，合并成功（可能要解决冲突）后，再在master上合并mirror分支并push到远程
发布脚本更新发布机器上的master到最新版本，建立master的发布tag，然后开始线上部署
线上代码稳定后，删除develop和mirror分支
注意事项
不要在master上进行开发，master分支是连接远程代码库和本地分支的桥梁，桥梁的功能只有一个就是连接；
mirror分支的作用是，如果合并发生冲突，可以保留一份干净的副本，如果改动很小，这个分支也可以不要；
develop和mirror分支的名字只要是非master的任意名字都可以，比如hotfix, new-mobile等等；

